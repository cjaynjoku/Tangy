@page "/category"
@using TangyModels

@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _jsRuntime

<h3>Category List</h3>

<_DeleteConfirmation DeleteData="@OnDeleteData" IsParentComponentProcessing="IsLoading"></_DeleteConfirmation>
    <div class="row mt-4">
        <div class="col-6">
        <h4 class="card-title text-primary">Category List</h4>
        </div>
    <div class="col-4 offset-2">
        <a href="/category/create" class="btn btn-primary form-control">Add New Category</a>
    </div>
    <div class="col-12">
        @if(Categories.Any()){
            <table class="table table-border">
             <thead>
                 <tr>
                    <th>Name</th>
                    <th>Actions</th>
                 </tr>
            </thead>
            <tbody>
                @foreach(var category in Categories){
                    <tr>
                        <td>@category.Name</td>
                        <td>
                        <NavLink href="@($"category/edit/{category.Id}")" class="btn btn-primary">Edit</NavLink>
                        <button class="btn btn-danger" @onclick="@(() => HandleDelete(category.Id))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
            </table>
        }
        else
        {
            @if(IsLoading){
                <div class="text-center">
                    <img src="images/loading.gif">
                </div>
            }
            else{
                <p>No Records Found.</p>
            }
        }
    </div>
    </div>

@code {
    private IEnumerable<CategoryDTO> Categories {get; set;} = new List<CategoryDTO>();
    private bool IsLoading { get; set; };

    private int DeleteCategoryId { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LoadCategories();
        }

    }
    private void LoadCategories()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = _categoryRepository.GetAll();
        IsLoading = false;
        StateHasChanged();

    }

    private void HandleDelete(int Id)
    {
        DeleteCategoryId = Id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }
    private async Task OnDeleteData(bool isConfirmed)
    {
        
        IsLoading = true;
        if(isConfirmed && DeleteCategoryId != 0)
        {
            _categoryRepository.Delete(DeleteCategoryId);
            LoadCategories();
            _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }

        IsLoading=false;
        
       
    }
}
